/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package pl.mpsk2.aspplugin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static pl.mpsk2.aspplugin.psi.ASPTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_ASPLexer.flex</tt>
 */
public class _ASPLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\42\1\13\1\20\1\35\1\0\1\15\1\11\1\60\1\65\1\37\1"+
    "\14\1\27\1\36\1\51\1\3\1\4\11\5\1\26\1\66\1\40\1\16\1\41\1\62\1\17\16\10\1"+
    "\75\4\10\1\76\6\10\1\57\1\12\1\64\1\73\1\6\1\0\1\22\1\21\1\30\1\47\1\24\1"+
    "\54\1\55\1\67\1\45\1\50\1\7\1\44\1\43\1\32\1\31\1\71\1\7\1\53\1\23\1\33\1"+
    "\34\1\46\1\70\1\52\1\74\1\61\1\56\1\72\1\63\1\25\6\0\1\1\32\0\1\2\337\0\1"+
    "\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\3\1\1\10\1\11\1\12\1\13\1\1\2\6\1\14"+
    "\1\15\1\16\2\6\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\2\6\1\24\1\6\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\6\1\35\1\36\1\7"+
    "\1\37\1\0\1\40\1\0\1\41\16\0\3\6\1\42"+
    "\1\43\2\6\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\2\0\1\54\1\55\2\6\1\56"+
    "\2\6\1\7\22\0\2\6\1\57\1\60\1\6\1\61"+
    "\1\62\1\63\2\0\4\6\1\7\1\0\1\64\1\65"+
    "\10\0\1\66\1\67\1\0\1\70\6\0\1\71\2\6"+
    "\2\0\1\72\2\6\1\73\1\7\1\74\1\75\1\76"+
    "\1\77\4\0\1\100\13\0\1\6\1\101\2\0\1\6"+
    "\1\102\1\7\2\0\1\103\1\104\7\0\1\105\4\0"+
    "\1\106\2\0\1\6\1\7\3\0\1\107\5\0\1\110"+
    "\5\0\1\6\1\7\1\111\4\0\1\112\3\0\1\113"+
    "\1\114\1\115\1\0\1\6\1\7\1\116\1\0\1\117"+
    "\1\120\1\121\1\122\1\0\1\123\1\124\1\7\1\0"+
    "\1\125\1\7\1\126\2\7\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\77\0\77\0\77\0\77"+
    "\0\u02b5\0\u02f4\0\u0333\0\77\0\u0372\0\77\0\u03b1\0\u03f0"+
    "\0\u042f\0\77\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\u0666\0\77\0\77\0\u06a5\0\u06e4\0\u01f8"+
    "\0\77\0\u0723\0\77\0\u0276\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\77\0\77\0\u0b52\0\u0b91"+
    "\0\77\0\77\0\77\0\77\0\u0bd0\0\u0c0f\0\u0c4e\0\77"+
    "\0\77\0\u0c8d\0\u0ccc\0\77\0\77\0\u0d0b\0\u0d4a\0\77"+
    "\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u017a"+
    "\0\u017a\0\u1332\0\77\0\77\0\77\0\u1371\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\77\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u181e\0\77\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959"+
    "\0\u1998\0\u017a\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u017a\0\u1ad3"+
    "\0\u1b12\0\u017a\0\u1b51\0\77\0\77\0\u1b90\0\77\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\77\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"+
    "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u017a\0\u1fbf\0\u1ffe\0\u203d\0\u017a\0\u207c\0\u20bb\0\u20fa"+
    "\0\77\0\77\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\77\0\u22f2\0\u2331\0\u2370\0\u23af\0\u017a\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\77\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u26a3\0\77\0\u26e2\0\u2721\0\u2760"+
    "\0\u279f\0\u27de\0\u281d\0\u285c\0\77\0\u289b\0\u28da\0\u2919"+
    "\0\u2958\0\77\0\u2997\0\u29d6\0\u2a15\0\77\0\77\0\77"+
    "\0\u2a54\0\u2a93\0\u2ad2\0\77\0\u2b11\0\77\0\77\0\77"+
    "\0\77\0\u2b50\0\77\0\u017a\0\u2b8f\0\u2bce\0\77\0\u2c0d"+
    "\0\77\0\u2c4c\0\u2c8b\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\10\1\24\1\25\1\26\2\10\1\27"+
    "\1\10\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\10\1\37\2\10\1\40\1\10\1\41\1\10\1\42"+
    "\2\10\1\43\1\44\1\45\1\10\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\10\1\54\1\55\1\10\1\56"+
    "\1\11\100\0\2\3\77\0\1\57\77\0\2\6\100\0"+
    "\1\10\1\11\10\0\4\10\3\0\5\10\6\0\6\10"+
    "\1\0\4\10\3\0\1\10\5\0\3\10\2\0\1\10"+
    "\2\11\4\0\5\10\10\0\4\10\3\0\5\10\6\0"+
    "\6\10\1\0\4\10\3\0\1\10\5\0\3\10\2\0"+
    "\3\10\4\0\5\11\10\0\4\11\3\0\5\11\6\0"+
    "\6\11\1\0\4\11\3\0\1\11\5\0\3\11\2\0"+
    "\3\11\11\60\1\61\1\62\64\60\12\0\1\63\64\0"+
    "\12\64\1\65\1\61\63\64\21\0\1\66\1\0\1\67"+
    "\1\70\3\0\1\71\2\0\1\72\7\0\1\73\1\0"+
    "\1\74\1\75\1\76\4\0\1\77\12\0\1\100\1\0"+
    "\1\101\11\0\5\10\10\0\4\10\3\0\1\10\1\102"+
    "\3\10\6\0\2\10\1\103\3\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\10\10\0"+
    "\4\10\3\0\2\10\1\104\2\10\6\0\6\10\1\0"+
    "\4\10\3\0\1\10\5\0\3\10\2\0\3\10\25\0"+
    "\1\105\10\0\1\106\44\0\5\10\10\0\4\10\3\0"+
    "\1\10\1\107\3\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\10\10\0"+
    "\4\10\3\0\2\10\1\110\2\10\6\0\6\10\1\0"+
    "\4\10\3\0\1\10\5\0\3\10\2\0\3\10\14\0"+
    "\1\111\1\0\1\112\17\0\1\113\1\114\1\115\1\116"+
    "\1\117\73\0\1\120\55\0\1\121\30\0\1\122\21\0"+
    "\1\123\23\0\1\124\76\0\1\125\64\0\5\10\10\0"+
    "\3\10\1\126\3\0\5\10\6\0\6\10\1\0\4\10"+
    "\3\0\1\10\5\0\3\10\2\0\3\10\4\0\5\10"+
    "\10\0\4\10\3\0\5\10\6\0\2\10\1\127\3\10"+
    "\1\0\4\10\3\0\1\10\5\0\3\10\2\0\3\10"+
    "\51\0\1\130\31\0\5\10\10\0\4\10\3\0\5\10"+
    "\6\0\2\10\1\131\3\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\10\10\0\3\10"+
    "\1\132\3\0\5\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\11\10\0"+
    "\4\11\3\0\5\11\6\0\6\11\1\0\4\11\3\0"+
    "\1\11\5\0\2\11\1\133\2\0\3\11\1\57\1\0"+
    "\75\57\1\60\1\0\75\60\1\64\1\0\75\64\22\0"+
    "\1\134\110\0\1\135\32\0\1\136\56\0\1\137\2\0"+
    "\1\140\55\0\1\141\2\0\1\142\115\0\1\143\13\0"+
    "\1\144\31\0\1\145\22\0\1\146\63\0\1\147\75\0"+
    "\1\150\112\0\1\151\53\0\1\152\6\0\1\153\71\0"+
    "\1\154\125\0\1\155\27\0\5\10\10\0\4\10\3\0"+
    "\5\10\6\0\4\10\1\156\1\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\10\10\0"+
    "\4\10\3\0\2\10\1\157\2\10\6\0\6\10\1\0"+
    "\4\10\3\0\1\10\5\0\3\10\2\0\3\10\4\0"+
    "\5\10\10\0\4\10\3\0\5\10\6\0\6\10\1\0"+
    "\4\10\3\0\1\10\5\0\3\10\2\0\1\160\2\10"+
    "\4\0\5\10\10\0\4\10\3\0\3\10\1\161\1\10"+
    "\6\0\6\10\1\0\4\10\3\0\1\10\5\0\3\10"+
    "\2\0\3\10\4\0\5\10\10\0\1\10\1\162\2\10"+
    "\3\0\5\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\16\0\1\163\76\0\1\164"+
    "\76\0\1\165\104\0\1\166\125\0\1\167\27\0\5\10"+
    "\10\0\4\10\3\0\5\10\6\0\6\10\1\0\2\10"+
    "\1\170\1\10\3\0\1\10\5\0\3\10\2\0\3\10"+
    "\4\0\5\10\10\0\4\10\3\0\5\10\6\0\6\10"+
    "\1\0\1\10\1\171\2\10\3\0\1\10\5\0\3\10"+
    "\2\0\3\10\4\0\5\10\10\0\4\10\3\0\5\10"+
    "\6\0\6\10\1\0\3\10\1\172\3\0\1\10\5\0"+
    "\3\10\2\0\3\10\4\0\5\10\10\0\1\10\1\173"+
    "\2\10\3\0\5\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\11\10\0"+
    "\4\11\3\0\3\11\1\174\1\11\6\0\6\11\1\0"+
    "\4\11\3\0\1\11\5\0\3\11\2\0\3\11\23\0"+
    "\1\175\116\0\1\176\25\0\1\177\36\0\1\200\122\0"+
    "\1\201\54\0\1\202\75\0\1\203\1\0\1\204\105\0"+
    "\1\205\67\0\1\206\66\0\1\207\124\0\1\210\56\0"+
    "\1\211\74\0\1\212\23\0\1\213\66\0\1\214\55\0"+
    "\1\215\117\0\1\216\105\0\1\217\57\0\1\220\73\0"+
    "\1\221\51\0\5\10\10\0\4\10\3\0\5\10\6\0"+
    "\6\10\1\0\4\10\3\0\1\10\5\0\3\10\2\0"+
    "\1\222\2\10\4\0\5\10\10\0\1\10\1\223\2\10"+
    "\3\0\5\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\10\10\0\4\10"+
    "\3\0\5\10\6\0\6\10\1\0\1\10\1\224\2\10"+
    "\3\0\1\10\5\0\3\10\2\0\3\10\54\0\1\225"+
    "\53\0\1\226\51\0\5\10\10\0\4\10\3\0\3\10"+
    "\1\227\1\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\10\10\0\3\10"+
    "\1\230\3\0\5\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\3\10\4\0\5\10\10\0"+
    "\4\10\3\0\5\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\1\231\2\10\2\0\3\10\4\0\5\10"+
    "\10\0\4\10\3\0\5\10\6\0\4\10\1\232\1\10"+
    "\1\0\4\10\3\0\1\10\5\0\3\10\2\0\3\10"+
    "\4\0\5\11\10\0\4\11\3\0\5\11\6\0\2\11"+
    "\1\233\3\11\1\0\4\11\3\0\1\11\5\0\3\11"+
    "\2\0\3\11\24\0\1\234\66\0\1\235\152\0\1\236"+
    "\32\0\1\237\76\0\1\240\75\0\1\241\105\0\1\242"+
    "\100\0\1\243\66\0\1\244\103\0\1\245\112\0\1\246"+
    "\76\0\1\247\75\0\1\250\54\0\1\251\124\0\1\252"+
    "\51\0\1\253\130\0\1\254\74\0\1\255\73\0\1\256"+
    "\4\0\1\257\25\0\5\10\10\0\4\10\3\0\5\10"+
    "\6\0\6\10\1\0\1\10\1\260\2\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\10\10\0\4\10"+
    "\3\0\5\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\1\261\2\10\45\0\1\262\106\0"+
    "\1\263\25\0\5\10\10\0\4\10\3\0\1\264\4\10"+
    "\6\0\6\10\1\0\4\10\3\0\1\10\5\0\3\10"+
    "\2\0\3\10\4\0\5\10\10\0\4\10\3\0\3\10"+
    "\1\265\1\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\11\10\0\4\11"+
    "\3\0\5\11\6\0\1\266\5\11\1\0\4\11\3\0"+
    "\1\11\5\0\3\11\2\0\3\11\23\0\1\267\126\0"+
    "\1\270\56\0\1\271\76\0\1\272\107\0\1\273\105\0"+
    "\1\274\66\0\1\275\76\0\1\276\67\0\1\277\75\0"+
    "\1\300\74\0\1\301\71\0\1\302\76\0\1\303\117\0"+
    "\1\304\55\0\1\305\125\0\1\306\27\0\5\10\10\0"+
    "\4\10\3\0\5\10\6\0\6\10\1\0\4\10\3\0"+
    "\1\10\5\0\3\10\2\0\1\307\2\10\32\0\1\310"+
    "\117\0\1\311\27\0\5\10\10\0\4\10\3\0\3\10"+
    "\1\312\1\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\11\10\0\4\11"+
    "\3\0\5\11\6\0\2\11\1\313\3\11\1\0\4\11"+
    "\3\0\1\11\5\0\3\11\2\0\3\11\45\0\1\314"+
    "\63\0\1\315\66\0\1\316\150\0\1\317\47\0\1\320"+
    "\76\0\1\321\100\0\1\322\74\0\1\323\76\0\1\324"+
    "\64\0\1\325\66\0\1\326\103\0\1\327\70\0\1\330"+
    "\100\0\1\331\74\0\1\332\60\0\5\10\10\0\4\10"+
    "\3\0\5\10\6\0\2\10\1\333\3\10\1\0\4\10"+
    "\3\0\1\10\5\0\3\10\2\0\3\10\4\0\5\11"+
    "\10\0\4\11\3\0\5\11\6\0\6\11\1\0\4\11"+
    "\3\0\1\334\5\0\3\11\2\0\3\11\55\0\1\335"+
    "\43\0\1\336\107\0\1\337\124\0\1\340\76\0\1\341"+
    "\41\0\1\342\116\0\1\343\64\0\1\344\77\0\1\345"+
    "\76\0\1\346\106\0\1\347\74\0\1\350\100\0\1\351"+
    "\37\0\5\10\10\0\4\10\3\0\5\10\6\0\3\10"+
    "\1\352\2\10\1\0\4\10\3\0\1\10\5\0\3\10"+
    "\2\0\3\10\4\0\5\11\10\0\3\11\1\353\3\0"+
    "\5\11\6\0\6\11\1\0\4\11\3\0\1\11\5\0"+
    "\3\11\2\0\3\11\44\0\1\354\77\0\1\355\55\0"+
    "\1\356\76\0\1\357\76\0\1\360\105\0\1\361\110\0"+
    "\1\362\72\0\1\363\41\0\5\10\10\0\3\10\1\364"+
    "\3\0\5\10\6\0\6\10\1\0\4\10\3\0\1\10"+
    "\5\0\3\10\2\0\3\10\4\0\5\11\10\0\4\11"+
    "\3\0\5\11\6\0\6\11\1\0\4\11\3\0\1\11"+
    "\5\0\3\11\2\0\2\11\1\365\46\0\1\366\60\0"+
    "\1\367\52\0\5\11\10\0\4\11\3\0\4\11\1\370"+
    "\6\0\6\11\1\0\4\11\3\0\1\11\5\0\3\11"+
    "\2\0\3\11\24\0\1\371\56\0\5\11\10\0\4\11"+
    "\3\0\5\11\6\0\6\11\1\0\4\11\3\0\1\11"+
    "\5\0\2\11\1\372\2\0\3\11\4\0\5\11\10\0"+
    "\4\11\3\0\5\11\6\0\1\11\1\373\4\11\1\0"+
    "\4\11\3\0\1\11\5\0\3\11\2\0\3\11\4\0"+
    "\5\11\10\0\3\11\1\374\3\0\5\11\6\0\6\11"+
    "\1\0\4\11\3\0\1\11\5\0\3\11\2\0\3\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11466];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\7\1\4\11\3\1\1\11"+
    "\1\1\1\11\3\1\1\11\10\1\10\11\1\1\2\11"+
    "\2\1\1\0\1\11\1\0\1\11\16\0\3\1\2\11"+
    "\2\1\4\11\2\1\1\0\2\11\2\0\2\11\2\1"+
    "\1\11\3\1\22\0\5\1\3\11\2\0\5\1\1\0"+
    "\1\1\1\11\10\0\2\1\1\0\1\11\6\0\3\1"+
    "\2\0\5\1\2\11\1\1\1\11\4\0\1\11\13\0"+
    "\2\1\2\0\3\1\2\0\2\11\7\0\1\11\4\0"+
    "\1\1\2\0\2\1\3\0\1\11\5\0\1\11\5\0"+
    "\2\1\1\11\4\0\1\11\3\0\3\11\1\0\2\1"+
    "\1\11\1\0\4\11\1\0\1\11\2\1\1\0\1\11"+
    "\1\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ASPLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ASPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 88: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 89: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 90: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 91: break;
          case 5: 
            { return ANONYMOUS;
            } 
            // fall through
          case 92: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 93: break;
          case 7: 
            { return VARIABLE;
            } 
            // fall through
          case 94: break;
          case 8: 
            { return ADD;
            } 
            // fall through
          case 95: break;
          case 9: 
            { return AND;
            } 
            // fall through
          case 96: break;
          case 10: 
            { return EQ;
            } 
            // fall through
          case 97: break;
          case 11: 
            { return AT;
            } 
            // fall through
          case 98: break;
          case 12: 
            { return BNOT;
            } 
            // fall through
          case 99: break;
          case 13: 
            { return COLON;
            } 
            // fall through
          case 100: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 101: break;
          case 15: 
            { return CSP;
            } 
            // fall through
          case 102: break;
          case 16: 
            { return SUB;
            } 
            // fall through
          case 103: break;
          case 17: 
            { return MUL;
            } 
            // fall through
          case 104: break;
          case 18: 
            { return LT;
            } 
            // fall through
          case 105: break;
          case 19: 
            { return GT;
            } 
            // fall through
          case 106: break;
          case 20: 
            { return DOT;
            } 
            // fall through
          case 107: break;
          case 21: 
            { return LBRACE;
            } 
            // fall through
          case 108: break;
          case 22: 
            { return LBRACK;
            } 
            // fall through
          case 109: break;
          case 23: 
            { return LPAREN;
            } 
            // fall through
          case 110: break;
          case 24: 
            { return QUESTION;
            } 
            // fall through
          case 111: break;
          case 25: 
            { return RBRACE;
            } 
            // fall through
          case 112: break;
          case 26: 
            { return RBRACK;
            } 
            // fall through
          case 113: break;
          case 27: 
            { return RPAREN;
            } 
            // fall through
          case 114: break;
          case 28: 
            { return SEM;
            } 
            // fall through
          case 115: break;
          case 29: 
            { return VBAR;
            } 
            // fall through
          case 116: break;
          case 30: 
            { return XOR;
            } 
            // fall through
          case 117: break;
          case 31: 
            { return COMMENT;
            } 
            // fall through
          case 118: break;
          case 32: 
            { return STRING;
            } 
            // fall through
          case 119: break;
          case 33: 
            { return MOD;
            } 
            // fall through
          case 120: break;
          case 34: 
            { return WIF;
            } 
            // fall through
          case 121: break;
          case 35: 
            { return IF;
            } 
            // fall through
          case 122: break;
          case 36: 
            { return CSP_ADD;
            } 
            // fall through
          case 123: break;
          case 37: 
            { return CSP_EQ;
            } 
            // fall through
          case 124: break;
          case 38: 
            { return CSP_SUB;
            } 
            // fall through
          case 125: break;
          case 39: 
            { return CSP_MUL;
            } 
            // fall through
          case 126: break;
          case 40: 
            { return CSP_LT;
            } 
            // fall through
          case 127: break;
          case 41: 
            { return CSP_GT;
            } 
            // fall through
          case 128: break;
          case 42: 
            { return POW;
            } 
            // fall through
          case 129: break;
          case 43: 
            { return LEQ;
            } 
            // fall through
          case 130: break;
          case 44: 
            { return GEQ;
            } 
            // fall through
          case 131: break;
          case 45: 
            { return NEQ;
            } 
            // fall through
          case 132: break;
          case 46: 
            { return DOTS;
            } 
            // fall through
          case 133: break;
          case 47: 
            { return ANY;
            } 
            // fall through
          case 134: break;
          case 48: 
            { return NOT;
            } 
            // fall through
          case 135: break;
          case 49: 
            { return CSP_LEQ;
            } 
            // fall through
          case 136: break;
          case 50: 
            { return CSP_GEQ;
            } 
            // fall through
          case 137: break;
          case 51: 
            { return CSP_NEQ;
            } 
            // fall through
          case 138: break;
          case 52: 
            { return SUM;
            } 
            // fall through
          case 139: break;
          case 53: 
            { return SUPREMUM;
            } 
            // fall through
          case 140: break;
          case 54: 
            { return MAX;
            } 
            // fall through
          case 141: break;
          case 55: 
            { return MIN;
            } 
            // fall through
          case 142: break;
          case 56: 
            { return INFIMUM;
            } 
            // fall through
          case 143: break;
          case 57: 
            { return BODY;
            } 
            // fall through
          case 144: break;
          case 58: 
            { return LEFT;
            } 
            // fall through
          case 145: break;
          case 59: 
            { return HEAD;
            } 
            // fall through
          case 146: break;
          case 60: 
            { return BASE;
            } 
            // fall through
          case 147: break;
          case 61: 
            { return SUMP;
            } 
            // fall through
          case 148: break;
          case 62: 
            { return SHOW;
            } 
            // fall through
          case 149: break;
          case 63: 
            { return EDGE;
            } 
            // fall through
          case 150: break;
          case 64: 
            { return TRUE;
            } 
            // fall through
          case 151: break;
          case 65: 
            { return UNARY;
            } 
            // fall through
          case 152: break;
          case 66: 
            { return RIGHT;
            } 
            // fall through
          case 153: break;
          case 67: 
            { return CONST;
            } 
            // fall through
          case 154: break;
          case 68: 
            { return COUNT;
            } 
            // fall through
          case 155: break;
          case 69: 
            { return FALSE;
            } 
            // fall through
          case 156: break;
          case 70: 
            { return BINARY;
            } 
            // fall through
          case 157: break;
          case 71: 
            { return THEORY;
            } 
            // fall through
          case 158: break;
          case 72: 
            { return FORGET;
            } 
            // fall through
          case 159: break;
          case 73: 
            { return SHOWSIG;
            } 
            // fall through
          case 160: break;
          case 74: 
            { return INCLUDE;
            } 
            // fall through
          case 161: break;
          case 75: 
            { return PROJECT_;
            } 
            // fall through
          case 162: break;
          case 76: 
            { return BLOCK;
            } 
            // fall through
          case 163: break;
          case 77: 
            { return PARSE_DEF;
            } 
            // fall through
          case 164: break;
          case 78: 
            { return EXTERNAL;
            } 
            // fall through
          case 165: break;
          case 79: 
            { return MAXIMIZE;
            } 
            // fall through
          case 166: break;
          case 80: 
            { return MINIMIZE;
            } 
            // fall through
          case 167: break;
          case 81: 
            { return VOLATILE;
            } 
            // fall through
          case 168: break;
          case 82: 
            { return DISJOINT;
            } 
            // fall through
          case 169: break;
          case 83: 
            { return PARSE_LP;
            } 
            // fall through
          case 170: break;
          case 84: 
            { return DIRECTIVE;
            } 
            // fall through
          case 171: break;
          case 85: 
            { return HEURISTIC;
            } 
            // fall through
          case 172: break;
          case 86: 
            { return CUMULATIVE;
            } 
            // fall through
          case 173: break;
          case 87: 
            { return OPTIMIZETUPLE;
            } 
            // fall through
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
